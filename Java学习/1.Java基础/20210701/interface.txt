interface
    接口的使用： 
        1. 接口的使用interface关键字来定义
            接口的本质是契约，标准，规范
            继承是一个“是不是”的关系，接口实现则是“能不能”的关系
        2. Java中，接口和类是并列的两个结构
        3. 如何定义接口：定义接口中的成员

            3.1 JDK7及以前：只能定义全局常量和抽象方法
                > 全局常量： public static fianl的，但是书写时，可以省略不写
                > 抽象方法： public abstract的

            3.2 JDK8及以后： 除了能定义全局常量和抽象方法之外，还可以定义静态方法、默认方法
                > public static void methon1(){}; // 静态方法
                > public default void methon2(){};// 默认方法
                > default void methon3(){};// 默认方法
                > 知识点1：接口中定义的静态方法，只能通过接口来调用
                > 知识点2：通过实现类的对象，可以调用接口中的默认方法
                    如果实现类重写了接口中的默认方法，调用时，仍然调用的是重写以后的方法
                > 知识点3：如果子类（或实现类）继承的父类和实现的接口中声明了同名同参数的方法，
                    那么子类在没有重写此方法的情况下，默认调用的是父类中的同名同参数的方法。 --> 类优先原则
                > 知识点4：如果实现类实现了多个接口，而这多个接口中定义了同名同参数的默认方法。
                    那么在实现类没有重写此方法的情况下，报错。 --> 接口冲突
                    这就需要我们必须在实现类中重写此方法。
                > 知识点5：如何在子类（或实现类）的方法中调用父类、接口中被重写的方法
                    AA.super.methond(); 调用接口中的默认方法

        4.接口中不能定义构造器的！ 意味着接口不可以实例化

        5. Java开发中，接口都通过让类去实现(implements)的方式来使用，
            如果实现类覆盖了接口中的所有抽象方法，则此实现类就可以实例化
            如果实现类没有覆盖接口中所有的抽象方法，则此实现类仍为一个抽象类

        6. Java类可以实现多个接口 ---> 弥补了Java单继承性的局限性
            格式: class AA extends BB implements CC,DD,EE
        
        7. 接口与接口之间可以继承，并且可以多继承
**************************************************
        8. 接口的具体使用，体现多态性
        9. 接口，实际上可以看做是一种规范

        面试题：抽象类与接口有哪些异同?



public class IntergaceTest {
    public static void main(String[] ages) {
        System.out.println(Flyable.MAX_SPEED);
        System.out.println(Flyable.MIX_SPEED);
        // Flyable.MAX_SPEED = 1； // 错误
    }
}

interface Flyable {
    // 全局常量
    public static final int MAX_SPEED = 7900; // 第一宇宙速度
    int MIN_SPPED = 1; // 省略了public static final 


    // Interface cannot have constructors
    //public Flyable() {
    //
    //}

    public abstract void fly();
    // 省略了 public abstract
    void stop();
}

class Plane implements Flyable {
    public abstract void fly() {

    }

    public void stop() {

    }
}


接口是一种规范
    1. 接口的使用上也满足多态性
    2. 接口，实际上就是定义了一种规范
    3. 开发中，体会面向接口编程

接口的匿名实现类
    1. 创建接口的非匿名实现类的非匿名对象
    BB bb = new BB();
    cc.methon(bb);

    2. 创建接口的非匿名实现类的匿名对象
    cc.methon(new BB());

    3. 创建接口的匿名实现类的非匿名对象
    DD dd = new DD() {
        public void methon1() {}

        public void methon2() {}
    }
    cc.methon(dd);

    4. 创建接口的匿名实现类的匿名对象
    cc.methon(new DD() {
        public void methon1() {}

        public void methon2() {}
    });


接口的应用：代理模式
    应用场景：
        安全代理：屏蔽对真实角色的直接访问
        远程代理：通过代理类处理远程方法调用（RMI）
        延迟加载：先加载轻量级的代理对象，真正需要再加载真实对象
        比如你要开发一个大文档查看软件，大文档中有大的图片，有可能一个图片有100mb，
        在打开文件时不可能将所有的图片都显示出来，这样就可以使用代理模式，
        当需要查看图片时，用proxy来进行大图片的打开

    分类：
        静态代理（静态定义代理类）
        动态代理（动态生成代理类）
            JDK自带的动态代理，需要反射等知识

public class NetWorkTest{
    public static void main(String[] ages) {
        Server s = new Server();
        ProxyServer p = new ProxyServer(server);
        p.browse();
    }
}

interface NetWrok{
    public void browse();
}

// 被代理类
class Server implements NetWrok{
    public void browse() {
        System.out.pringln("真实的服务器访问网络")
    }
}

// 代理类
class ProxyServer implements NetWork {
    
    private NetWrok work;

    public ProxyServer(NetWrok work) {
        this.work = work;
    }

    public void check() {
        System.out.pringln("检查网络网络")
    }

    public void browse() {
        check();
        work.browse();
    }
}


接口的应用：工厂设计模式
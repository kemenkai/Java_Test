多线程安全锁2：

使用同步代码块解决继承Thread类的方式的线程安全问题

说明：在继承Thread类创建多线程的方式中，慎用this充当同步监视器，
    可以考虑使用当前类充当同步监视器。



class Window extends Thread{

    private static int ticket = 100;

    // private static Object obj = new Object;

    public void run() {
        while(true) {
            // 错误方式： this代表着t1,t2,t3三个对象
            // synchronized(thic) {
            // 方式一
            // synchronized(obj) {
            // Class clazz = Window.class, Window.class只会加载一次
            synchronized(Window.class) {
                if (ticket > 0) {
                    System.out.println(getName() + ": 卖票，票号为: " + ticket);
                    ticket--;
                } else {
                    break;
                }
            }
        }
    }
}


public class WindowTest{
    public static void main(String[] ages) {
        Window w1 = new Window();
        Window w2 = new Window();
        Window w3 = new Window();

        w1.setName("窗口1");
        w2.setName("窗口2");
        w3.setName("窗口3");

        w1.start();
        w2.start();
        w3.start();
    }
}

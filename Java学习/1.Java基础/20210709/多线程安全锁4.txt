多线程安全锁4

使用同步方法处理继承Thread类的方式中的线程安全

关于同步方法的总结：
    1.同步方法仍然涉及到同步监视器，只是不需要我们显示的声明
    2.非静态的同步方法，同步监视器是：this
    3.静态的同步方法，同步监视器是：当前类本身


class Window extends Thread{

    private static int ticket = 100;

    public void run() {
        while(true) {
            show();
        }
    }

    // 同步监视器：t1, t2, t3。 此种解决方式是错误的
    // private synchronized void show() {
    // 同步监视器：Window.class
    private static synchronized void show() {
        if(ticket > 0) {
            System.out.println(Thread.currentThread().getName() + 
            "卖票，票号为：" + ticket);
            ticket--;
        } 
    }
}


public class WindowTest{
    public static void main(String[] ages) {
        Window w1 = new Window();
        Window w2 = new Window();
        Window w3 = new Window();

        w1.setName("窗口1");
        w2.setName("窗口2");
        w3.setName("窗口3");

        w1.start();
        w2.start();
        w3.start();
    }
}

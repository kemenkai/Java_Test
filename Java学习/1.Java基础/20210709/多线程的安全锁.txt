
1.问题：卖票过程中，出现了重票、错票 --> 出现了线程的安全问题
2.问题出现的原因是什么？
    答：当某个线程操作车票的过程中，尚未操作完成时，其他线程参与进来，也操作车票。
3.如何解决？
    答：当一个线程在操作ticket的时候，其他线程不能参与进来。知道线程a操作完ticket时，
    其他线程才可以开始操作ticket这种情况即使线程a出现了阻塞，也不能被改变。
4.在Java中，我们通过同步机制，来解决线程的安全问题。

    方式一： 同步代码块
        synchronized(同步监视器) {
            // 需要被同步的代码
        }
        说明：1.操作共享数据的代码，即为需要被同步的代码。 
                --> 不能包含代码多了，也不能包含代码少了。

            2.共享数据：多个线程共同操作的变量。比如：ticket就是共享数据

            3.同步监视器，俗称：锁。任何一个类的对象，都可以充当锁。
                要求：多个线程必须要共用同一把锁。

            补充：在实现Runnable接口创建多线程的方式中，我们可以考虑使用this充当同步监视器。


    方式二： 同步方法
        如果操作共享数据的代码完整的生命在一个方法中，我们不妨将此方法声明同步的。

5.同步的方式，解决了线程的安全问题。 ---好处
  操作同步代码时，只能有一个线程参与，其他线程等待。相当于时一个单线程的过程，效率低。 ---局限性


使用同步代码块解决实现Runnable接口的线程安全问题

class MThread implements Runnable{
    
    private int ticket = 100;
    // 锁
    // private Object obj = new Object();

    public void run() {
        while(true) {
            // synchronized(obj) { 方式二
            // 可以使用当前对象
            // 方式一：此时的this：唯一的windowl的对象
            synchronized(this) {
                if(ticket > 0) {
                    System.out.println(Thread.currentThread().getName() + 
                    "卖票，票号为：" + ticket);
                    ticket--;
                } else {
                    break;
                }
            }
        }
    }
        
}

public class ThreadTest1{
    public static void main(String[] ages) {
        MThread m1 = new MThread();

        Thread t1 = new Thread(m1);
        Thread t2 = new Thread(m1);
        Thread t3 = new Thread(m1);

        t1.setName("窗口1");
        t2.setName("窗口2");
        t3.setName("窗口3");

        t1.start();
        t2.start();
        t3.start();
    }
}
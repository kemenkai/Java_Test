Java比较器
一、说明：Java中的要，正常情况下，只能进行比较：== 或 !=。不能使用>或<的
    但是在开发场景中，我们需要对多个对象进行排序，言外之意，就需要比较对象的大小。
    如何实现？使用两个接口中的任何一个：Comparable 或 Comparator
二、Comparable接口的与Comparator的使用的对比
    Comparable接口的方式一旦指定，保证Comparable接口实现类的对象再任何位置都可以比较大小
    Comparator接口属于临时性的比较。


Comparable接口的使用举例：自然排序
    1.像String、包装类等实现了Comparable接口，重写了compareTo()方法，给出了比较两个对象大象的方式
    2.像String、包装类重写compareTo()方法以后，进行了从小到达的排列
    3.重写compareTo(obj)的规则：
        如果当前对象this大于形参对象obj，则返回正整数，
        如果当前对象this小于形参对象obj，则返回负整数，
        如果当前对象this等于形参对象obj，则返回0
    4.对于自定义类来说，如果需要排序，我们可以让自定义类实现Comparable接口，重写compareTo(obj)
        在compareTo(obj)方法中指明如何排序

    String[] arr = new String[]{"AA","CC","MM","GG","DD","JJ"};
    Arrays.sort(arr);
    System.out.println(arr.toString());

// 商品类
pulibc class Goods implements Compareble{
    private String name;
    private double price;

    // 指明商品比较大小的方式: 按照价格从低到高排序,再按照产品名称从低到高排序
    public int compareTo(Object o) {
        if(o instanceof Goods) {
            Goods goods = (Goods) o;
            // 方式一:
            if(this.price > goods.price) {
                return 1;
            } else if(this.price < goods.price) {
                return -1;
            } else {
                // return 0;
                return this.name.compareTo(goods.name);
                // 从高到低
                // return -this.name.compareTo(goods.name);
            }
            // 方式二:
            // return Double.compare(this.price, goods.price);
        }
        throw new RuntimeException("传入的数据类型不一致！");
    }
}

public void test() {
    Goods[] arr = new Goods[4];
    arr[0] = new Goods("lenovoMouse", 34);
    arr[1] = new Goods("dellMouse", 43);
    arr[2] = new Goods("xiaomiMouse", 12);
    arr[3] = new Goods("huaweiMouse", 65);
    arr[3] = new Goods("microsoftMouse", 43);

    Arrays.sort(arr);

    System.out.println(Arrays.toString(arr));
}
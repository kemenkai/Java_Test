集合
一、集合框架的概述
    1. 集合、数组都是对多个数据进行存储操作的结构，简称Java容器。
        说明：此时的存储，主要指的是内存层面的存储，不涉及到持久化的存储（.txt,.jpg,.avi,数据库中）

    2. 数组在存储多个数据方面2个点：
        2.1. 特点:
            > 一旦初始化以后，其长度就确定了。
            > 数组一旦定义好，其元素的类型也就确定了。
                我们也就只能操作指定类型的数据了。 比如：String[] arr; int[] arr1;
        2.2. 缺点：
            > 一旦初始化以后，其长度就不可修改。
            > 数组中提供的方法非常有限，对于添加、删除、插入数据等操作，非常不便，同时效率不高。
            > 获取数组中实际元素的个数的需求，数组没有现成的属性或方法可用。
            > 数组存储数据的特点: 有序、可重复。对于无序、不可重复的需求，不能满足。

二、集合框架
    |-------------Collection接口：单列集合，用来存储一个一个的对象

        |-----------List接口: 存储有序的、可重复的数据。 --> “动态”数组, 替换原有的数组
            |-----ArrayList：作为List接口的主要实现类，线程不安全的，效率高；底层使用Object[] elementData存储
                源码分析：
                    JDK 7:
                        Arrory list = new ArrayList(); // 底层创建了长度是10的Object[]数组
                        list.add(123); // elementData[0] = new Integer(123);
                        ...
                        list.add(11); // 如果此次的添加导致底层elementData数组容量不够，则扩容。
                            默认情况下；扩容为原来的容量的1.5倍，同时需要将原有数组中的数据复制到新的数组中。

                        结论：建议开发中使用带参的构造器：ArrayList list = new ArrayList(int capacity)
                    JDK 8: ArrayList的变化
                        Arrory list = new ArrayList(); // 底层Object[] elementData初始化为{},并没有创建长度为10的数组
                        list.add(123); //第一次调用add()时，底层才创建了长度10的数组，并将数据123添加到elementData[0]
                        ...
                        后续的添加和扩容操作与jdk7无异。

                小结：jdk7中的ArrayList的对象的创建类似于单例的饿汉式，二JDK8中的ArrayList的对象的创建类似于单例的懒汉式，
                延迟了数组的创建，节省了内存。


            |-----LinkedList：对于频繁的插入、删除操作，使用此类效率比ArrayList高；底层使用双向链表存储
                                对于频繁的遍历操作，LinkedHashSet效率高于HashSet
                源码分析：
                    LinkedList list = new LinkedList(); // 内部声明了Node类型的first和last属性，默认值为null
                    List.add(123); // 将123封装到Node中，创建了Node对象。

                    其中，Node定义为：体现LinkedList的双向链表的说法
                        private static class Node<E> {
                            E item;
                            Node<E> next;
                            Node<E> prev;

                            Node(Node<E> prev, E element, Node<E> next) {
                                this.item = element;
                                this.next = next;
                                this.prev = prev;
                            }
                        }


            |-----Vector：作为List接口的古老实现类，线程安全的，效率低；底层使用Object[]存储
                源码分析: JDK7 和 JDK 8 中通过Vector()构造器创建对象时，底层都创建了长度为10的数组
                    再扩容方面，默认扩容为原来的数组长度的2倍。


            面试题：ArrayList LinkedList Vector三者的异同
            同：三个类都实现了List接口，存储数据的特点相同：存储有序的、可重复的数据
            不同：见上

        |-----------Set接口：存储无序的、不可重复的数据。 --> 高中讲的“集合”
            |-----HashSet、LinkedHashSet、TreeSet

    |-------------Map接口：双列集合，用来存储一对（key - value）一对的数据 --> 高中函数: y=f(x)
        |-----HashMap、LinkedHashMap、TreeMap、Hashtable、Properties

三、Collection接口中的方法的使用
    结论：
        向Collection接口的实现类的对象中添加数据obj时，要求obj所在类要重写equals();
    例子1：
        Collection coll1 = new ArrayList();
        // add(Object e): 将元素e添加到集合coll中
        coll1.add("AA");
        coll1.add("123");
        coll1.add(new Date());

        //size(): 获取添加的元素的个数s
        coll1.size(); //3

        //addAll(Collection coll): 将coll集合中的元素添加到当前的集合中
        Collection coll2 = new ArrayList();
        coll2.add(456);
        coll1.addAll(coll2);
        System.out.println(coll1);

        //clear():清空集合元素
        coll.clear();

        //isEmpty(): 判断当前集合是否为空
        System.out.println(coll.isEmpty());

        //contains(Object obj): 判断当前集合中是否包含obj
        //我们在判断时会调用obj对象所在类的equals()
        coll1.contains(new String(456));
        //containsAll(Collection coll): 判断形参coll中的所有元素是否都存在于当前集合中
        coll1.containsAll(coll2);

        //remove(Object obj): 从当前集合中移除obj元素
        coll1.remove(123);
        //removeAll(Collection coll): 差集： 从当前集合中移除coll中所有的元素
        coll1.remove(coll2);

        //retainAll(Collection coll): 交集：获取当前集合和coll集合的交集，并返回给当前集合
        coll1.retainAll(coll2);

        //equals(Object obj): 要想返回true，需要判断当前集合和形参集合的元素都相同
        coll1.equals(coll2);

        //hashCode(): 返回当前对象的哈希值
        coll.hashCode();

        //集合 --> 数组：toArray():
        Object[] obj = coll.toArray();
        // 拓展: 数组 --> 集合
        List<String> list = Arrays.asList(new String[]{"aa","bb","cc"})
        //注意：
            // List arr1 = Arrays.asList(new int[]{123,456}); //错误，会识别为一个元素
            List arr1 = Arrays.asList(new Integer[]{123,456}); //对

        // iterator(): 返回Iterator接口的实例,用于遍历集合元素。
            集合元素的遍历操作，使用迭代器Iterator接口
                1. 内部的方法：hasNext() 和 next()
                2. 集合对象每次调用iterator()方法都得到一个全新的迭代器对象，
                    默认游标都在集合的第一个元素之前。
                3. 内部定义了remove(),可以在遍历的时候，删除集合中的元素。此方法不同于集合直接调用remove();

        Iterator ite = coll1.iterator();

        // next(): 
        // 方式一：
        ite.next();
        // 方式二：不推荐
        for(int i =0; i < coll.size(); i++) {
            System.out.println(ite.next());
        }
        // 方式三:推荐
        while(ite.hasNext()) {
            System.out.println(ite.next());
        }

        // 错误方式一：
        //while((ite.next()) != null) {
        //    System.out.println(ite.next());
        //}
        //错误方式二：
        while(coll.iterator().hasNext()) {
            System.out.println(coll.iterator().next());
        }

        //remove(): 删除集合中的数据
        // 如果还未调用next()或在上一次调用next方法之后已经调用了remove方法，
        // 再调用remove都会报IllegalStateException。
        while(ite.hasNext()) {
            Object ojb = ite.next();
            if("AA".equals(obj)) {
                // 删除集合中的数据
                ite.remove();
            }
        }

        // jdk 5.0 新增了foreach循环，用于遍历集合、数组
        // for(集合或数组中元素的类型 局部遍历 : 集合或数组对象)
        // 内部仍然调用了迭代器
        for(Object obj : coll1) {
            System.out.println(obj);
        }

        // 练习题
        String[] arr = new String[]{"AA","BB","CC"};
        for(String s : arr) {
            s = "GG";
        }// 结果不变, 不是指针指向

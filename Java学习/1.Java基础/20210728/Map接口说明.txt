Map接口说明
一、Map的实现类的结构情况: 
|----Map: 双列数据, 存储key-value对的数据  ---类似于高中的函数:   y = f(x)
    |----HashMap: 作为Map的主要实现类; 线程不安全, 效率高；存储null的key和value
        |----LinkedHashMap: 保证在遍历map元素时, 可以按照添加的顺序实现遍历
            原有:    在原有的HashMap底层结构基础上, 添加了一对指针, 指向前一个和后一个元素
            对于频繁的遍历操作, 此类执行效率高于HashMap
    |----TreeMap: 保证按照添加的key-value对进行排序, 实现排序遍历。此时考虑key的自然排序或定制排序
                底层使用红黑树
    |----Hashtable: 作为古老的实现类; 线程安全, 效率低；不能存储null的key和value
        |----Properties: 常用来处理配置文件 key和value都是String类型

    HashMap的底层: 数组+链表 (jdk7 及之前)
                   数组+链表+红黑树 (jdk8)

 二、Map结构的理解:   
    Map中的key: 无序的、不可重复的, 使用Set存储所有的key ---> key所在的类要重写equals()和hashCode()。（以HashMap为例）
    Map中的value: 无序的、可重复的, 使用Collection存储所有的value --->value所在的类要重写equals()
    一个键值对: key-value构成了一个Entry对象
    Map中的entry: 无序的、不可重复的, 使用Set存储所有的entry


三、HashMap的底层实现原理？
    以jdk7为例说明:   
        HashMap map = new HashMap();
            在实例化以后, 底层创建了长度是16的一维数组Entry[] table
        ...可能已经执行过多次put...
        map.put(key1, value1);
            首先, 调用key1所在类的hashCode()计算key1哈希值, 此哈希值经过某种算法计算以后, 得到在Entry数组种的存放位置
            如果在此位置上的数据为空, 此时的key1-value1(entry1)添加成功 ---- 情况1
            如果在此位置上的数据不为空（意味着此位置上存在一个或多个数据（以链表形式存在））, 
            比较key1和已经存在的一个或多个数据的哈希值:   
                如果key1的哈希值与已经存在的数据（key2-value2）的哈希值都不相同, 此时key1-value1添加成功 ---- 情况2
                如果key1的哈希值和已经存在的某一个数据的哈希值相同, 继续比较: 调用key1所在类的equals(key2)方法, 比较:
                    如果equals()返回false:    此时key1-value1添加成功 ---- 情况3
                    如果equals()返回true:   使用value1替换value2

            补充:   关于情况2和情况3, 此时key1-value1和原来的数据以链表的方式存储。

            在不断的添加过程种, 会涉及到扩容问题, 当超出临界值（且要存放的位置非空）时, 扩容。
                默认的扩容方式:   扩容为原来容量的2倍, 并将原有的数据复制过来。

    以jdk8为例说明:   相较于jdk7在底层实现方面的不同
        1. HashMap map = new HashMap(); // 底层没有创建一个长度为16的数组
        2. jdk8 底层的数组是:    Node[], 而非Entry[]
        3. 首次调用put()方法时, 底层创建长度为16的数组
        4. jdk7 底层结构只有:   数组 + 链表。 jdk8种底层结构:   数组 + 链表 + 红黑树
            当数组的某一个索引位置上的元素以链表形式存在的数据个数 > 8 且 当前数组的长度 > 64时, 
                此时此索引位置上的所有数据改为使用红黑树存储



HashMap源码中的重要常量
    DEFAULT_INITIAL_CAPACITY: HashMap的默认容量: 16
    MAXIMUM_CAPACITY: HashMap的最大支持容量: 2^30
    DEFAULT_LOAD_FACTOR: HashMap的默认加载因子: 0.75
    TREEIFY_THRESHOLD: Bucket中链表长度大于该默认值, 转化为红黑树: 8
    UNTREEIFY_THRESHOLD: Bucket中红黑树存储的Node小于该默认值, 转化为链表
    MIN_TREEIFY_CAPACITY: 桶中的Node被树化时最小的hash表容量:   64
        （当桶中Node的数量大到需要变红黑树时, 若hash表容量小于MIN_TREEIFY_CAPACITY时, 
        此时应执行resize扩容操作这个MIN_TREEIFY_CAPACITY的值至少时TREEIFY_THRESHOLD的4倍）
    table: 存储元素的数组, 总是2的n次幂
    entrySet: 存储具体元素的集
    size: HashMap中存储的键值对的数量
    modCount: HashMap扩容和结构改变的次数
    threshold: 扩容的临界值, = 容量 * 填充因子, 16 * 0.75 => 12
    loadFactor: 填充因子、加载因子



面试题:   
 1. HashMap的底层实现原理？
 2. HashMap和Hashtable的异同？
 3. CurrentHashMap 与 HashTable的异同？ （暂时不讲）
 4. 谈谈你对HashMap种put/get方法的认识？ 如果了解再谈谈HashMap的扩容机制？默认大小是多少？什么是负载因子(或填充比)？
    什么是吞吐临界值(或阈值、threshold)？


四、LinkedHashMap的底层实现原理(了解)
    static class Entry<K,V> extends HashMap.Node<K,V> {
        Entry<K,V> before, after;// 能够记录添加的元素的先后顺序
        Entry(int hash, K key, V value, Node<K,V> next) {
            super(hash, key, value, next);
        }
    }


五、Map中定义的方法:  
    Map map1 = new HashMap();

    添加、删除、修改操作
    // Object put(Object key, Object value): 将指定key-value添加到(或修改)当前map对象中
    // 添加
    map1.put("a",123);
    map1.put(123,456);
    // 修改
    map1.put("a",456);

    // void putAll(Map m): 将m中的所有key-value对存放到当前map中
    map2.putAll(map1);
    // Object remove(Object key): 移除指定key的key-value对, 并返回value
    m2.remove(a);
    // void clear(): 清空当前map中的所有数据
    m2.clear();// 与map = null; 操作不同

    元素查询的操作
    // Object get(Object key): 获取指定key对于的value
    map1.get("aa");
    // boolean containsKey(Object key): 是否包含指定的key
    map1.containsKey("aa");
    // boolean containsValue(Object value): 是否包含指定的value
    map1.containsValue("aa");
    // int size(): 返回map中key-value对的个数
    map1.size();
    // boolean isEmpty(): 判断当前map是否为空
    map1.isEmpty();
    // boolean equals(Object obj): 判断当前map和参数对象是否相等
    map1.equals(map2);

    元视图操作的方法
    // Set keySet(): 返回所有key构成的Set集合
    //遍历所有的key集:
    Set set = map1.keySet();
    Iterator ite = set.iterator();
    // Collection values(): 返回所有value构成的Collection集合
    // 遍历所有的value
    Collection values = map1.values();
    // Set entrySet(): 返回所有key-value对构成的Set集合 
    Set entrySet = map.entrySet();


总结: 常用方法
添加: Object put(Object key, Object value)
删除: Object remove(Object key)
修改: Object put(Object key, Object value)
查询: Object get(Object key)
长度: int size()
遍历: Set keySet()\Collection values()\Set entrySet()
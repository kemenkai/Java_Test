TreeSet
一、
    1. 向TreeSet中添加的数据，要求时相同类的对象。
    2. 两种排序方式：自然排序（实现Comparable接口）和定制排序（Comparator）
    3. 自然排序中，比较两个对象是否相同的标准为：compareTo()返回0，不再是equals()
    4. 定制排序中，比较两个对象是否相同的标准为：compare()返回0，不再是equals()

Set set = new TreeSet();

// 失败：不能添加不同类的对象
// set.add(123);
// set.add(456);
// set.add("aa");

// 举例1
// set.add(1);
// set.add(12);
// set.add(123);
// set.add(1234);

// 举例2
set.add(new User("Tom", 12));
set.add(new User("Jerry", 13));
set.add(new User("Jim", 14));


Iterator ite = set.iterator();
while(ite.hasNext()) {
    System.out.println(ite.next());
}

定制排序：
    Comparator com = new Comparator() {
        // 按照年龄从小到大排列
        public int compare(Object o1, Object o2) {
            if(o1 instanceof User && o2 instanceos User) {
                User u1 = (User) o1;
                User u2 = (User) o2;
                return Integer.compare(u1.getAge(), u2.getAge());
            } else {
                throw new RuntimeException("输入的数据类型不匹配!");
            }
        }
    };

    // 有参数，按照参数的定制方法排序
    Set set = new TreeSet(com);
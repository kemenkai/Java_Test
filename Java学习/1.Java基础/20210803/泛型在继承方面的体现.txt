1. 泛型在继承方面的体现
    1.1 虽然类A 是类B 的父类，但是G<A> 和 G<B> 二者不具备子父类关系，二者是并列关系。
    补充：类A 是类B 的父类， A<G> 是 B<G> 的父类

    反证法：
        假设list1 = list2;
        list1.add(123); 导致混入非String的数据，出错。

    Object obj = null;
    String str = null;
    obj = str;

    Object[] arr1 = null;
    String[] str1 = null;
    arr1 = str2;

    List<Object> list1 = null;
    List<String> list2 = null;
    // 此时的list1 和 list2 的类型不具有子父类关系
    list1 = list2; // 错误

2. 通配符的使用
    通配符: ?

    类A 是 类B 的父类，G<A> 和 G<B> 是没有关系的，二者共同的父类是：G<?>

    添加（写入）： 对于List<?>就不能向其内部添加数据
    除了添加null之外

    List<Object> list1 = null;
    List<String> list2 = null;
    List<?> list = null;
    list = list1;
    list = list2;

    // 获取（读取）: 允许读取数据，读取的数据类型为Object
    Object o = list.get(0);


3. 有限制条件的通配符的使用
    ? extends A: 
        G<? extends A> 可以作为G<A>和G<B>的父类，其中B是A的子类
    ?super A:
        G<? extends A> 可以作为G<A>和G<B>的父类，其中B是A的父类

    List<? extends Person> list1 = null;
    List<? super Person> list2 = null;

    List<Student> list 3 = new ArrayList<Student>();
    List<Person> list 4 = new ArrayList<Person>();
    List<Object> list 5 = new ArrayList<Object>();

    list1 = list3;
    list1 = list4;
    // 编译不通过
    // list1 = list5;

    // 编译不通过
    // list2 = list3;
    list2 = list4;
    list2 = list5;

    // 读取数据：
    list1 = list4;
    // 编译不通过
    // Student s = list1.get(0);
    // 编译通过
    Person o = list1.get(0);

    // 写入数据：
    // 编译不通过
    // list.add(new Student());

    list2.add(new Person());
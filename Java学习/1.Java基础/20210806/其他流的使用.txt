其他流的使用

1.标准输入、输出流（了解）
2.打印流
3.数据流




/*
标准输入、输出流（了解）
*/
1.1
    System.in: 标准输入流
    System.out：标准输出流
1.2 
    System类的setIn(InputStream is) / setOut(PrintStream out)方式重新指定输入和输出的流

1.3 练习
    从键盘输入字符串，要求将读取到的整行字符串转成大写输出。
        然后继续进行输入操作，直至当输入'e'或者'exit'时，退出程序。
    方法一：使用Scanner实现, 调用next()返回一个字符串
    方法二：使用System.in实现。System.in --> 转换流 -->BufferedReader.readLine()
    InputStreamReader isr = new InputStreamReader(System.in);
    BufferedReader br = new BufferedReader(isr);
    while(true) {
        System.out.println("请输入字符串：");
        String data = br.readLine();
        if("e".equalsIgnoreCase(data) || "exit".equalsIgnoreCase(data)) {
            System.out.println("程序结束。");
            break;
        }
        String upperCase = data.toUpperCase();
        System.out.println(upperCase);
    }

    br.close();


/*
打印流
*/
PrintStream: 字节流
PrintWriter: 字符流

/*
数据流
作用： 用于读取或写出基本数据类型的变量或字符串
练习：将内存中的字符串、基本数据类型的变量写出到文件中。
注意：处理异常的话，仍然应该使用try-catch-finally
*/

DataInputStream 和 DataOutputStream
1.
DataOutputStream dos = new DataOutputStream(new FileOutputStream("a.txt"));
2.
dos.writeUTF("aa");
dos.flush();
dos.writeInt(23);
dos.flush();
dos.writeBoolean(true);
dos.flush();
3.
dos.close();


// 将文件中存储的基本数据类型变量和字符串读取到内存中，保存在变量中。
// 注意点：读取不同类型的数据的顺序要与当初写入文件时，保存的数据的顺序一致
1.
DataInputStream dis = new DataInputStream("a.txt");

2.
String name = dis.readUTF();
int age = dis.readInt();
Boolean isMale = dis.readBoolean();

System.out.println(name + age + isMale);
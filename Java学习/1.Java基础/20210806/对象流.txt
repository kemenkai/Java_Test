处理流之六：对象流
ObjectInputStream: 反序列化
ObjectOutputStream: 序列化

对象流的使用
1. ObjectInputStream: 反序列化，读取
2. ObjectOutputStream: 序列化，保存 
作用： 用于存储和读取基本数据类型数据或对象的处理流。它的强大之处就是可以把Java中的对象写入到数据源中，
    也能把对象从数据源中还原回来。

序列化过程：将内存中的java对象保存到磁盘中或通过网络传输出去
使用ObjectOutputputStream实现

3. 要想一个java对象时可序列化的，需要满足相应的要求。见下方的Person类

4. 对象序列化机制
    循序把内存中的JAVA对象转换成平台无关的二进制流，从而允许把这种二进制流持久地保存在磁盘上，
    或通过网络将这种二进制流传输到另一个网络节点。
    当其他程序获取了这种二进制流，就可以恢复成原来的JAVA对象


序列化，保存
1.
ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream("a.dat"));
2.
oos.writeObject(new String("aa"));
oss.flush(); // 刷新操作
3.
oss.close();


反序列化，读取
1. 
ObjectInputStream oos = new ObjectInputStream(new FileInputStream("a.dat"));
2.
oos.readObject(new String("aa"));
oss.flush(); // 刷新操作
3.
oss.close();


// Person类需要满足如下的要求，方可序列化
// 1. 需要实现接口： Serializable接口
// 2. 当前类提供一个全局常量：serialVersionUID
        需要全局唯一
// 3. 除了当前Person类需要实现 Serializable接口之外，
        还必须保证其内部所有属性也必须是可序列化的。
        （默认情况下，基本数据类型可序列化）
// 补充： ObjectOutputStream和ObjectInputStream不能序列化
        static和transient修饰的成员变量 

 public class Person implements Serializable {
    
    public static final long serialVersionUID = 111L;
}
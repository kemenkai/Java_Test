Class类的理解
关于 java.lang.Class类的理解
1. 类的加载过程：
    程序经过javac命令以后，会生成一个或多个字节码文件(.class结尾)。
        接着我们使用java命令对某个字节码文件进行解释运行。
        相当于将某个字节码文件加载到内存中。
        此过程就称为类的加载。
        加载到内存中的类，我们就称为运行时类，此运行时类，就作为Class的一个实例。

2. 换句话说，Class的实例就对应着一个运行时类。

3. 加载到内存中的运行时类，会缓存一定的时间。在此时间之内，我们可以通过不同的方式
来获取此运行时类。

万事万物皆对象？ 对象.xxx, File, URL, 反射, 前端、数据库操作

例子1： 如何获取Class的实例(前三种方式需要掌握)
方式一： 调用运行时类的属性： .class
Class<Person> clazz1 = Person.class;

方式二：通过运行时类的对象，调用getClass()
Person p1 = new Person();
Class clazz2 = p1.getClass();

方式三： 调用Class的静态方法: forName(String classPath)
Class clazz3 = Class.forName("com.atguigu.java.Person");

方式四： 使用类的加载器: ClassLoader (了解)
ClassLoader classLoader = ReflectionTest.class.getClassLoader();
Class clazz4 = classLoader.loadClass("com.atguigu.java.Person");


// Class实例可以是哪些结构的说明：
Class c1 = Object.class;
Class c2 = Comparable.class;
Class c3 = String[].class;
Class c4 = int[][].class;
Class c5 = ElementType.class;
Class c6 = Override.class;
Class c7 = int.class;
Class c8 = void.class;
Class c9 = Class.class;

int[] a = new int[10];
int[] b = new int[100];
Class c10 = a.getClass();
Class c11 = b.getClass();
// 只要数组的元素类型与维度一样，就是同一个Class
System.out.println(c10 == c11);
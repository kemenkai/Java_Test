获取运行时类的方法的内部结构
权限修饰符  返回值类型  方法名(参数类型1 形参名1,...) throws XxxException{}
Class clazz = Person.class;
Method[] declaredMethods = class.getDeclaredMethods();
for(Method m : declaredMethods) {
    1. 获取方法声明的注解
    Annotaion[] annos = m.getAnnotations();
    for(Annotaion a : annos) {
        System.out.println(a);
    }

    2. 权限修饰符
    System.out.print(Modifier.toString(m.getModifiers()) + "\t");

    3. 返回值类型
    System.out.print(m.getReturnType().getName() + "\t");

    4. 方法名(参数类型1 形参名1,...)
    System.out.print(m.getName());
    System.out.print("(");

    5. 形参列表
    Class[] parameterTypes = m.getParameterTypes();
    if(!(parameterTypes == null && parameterTypes.length == 0)) {
        for(int i = 0; i < parameterTypes.length; i++) {
            if(i == parameterTypes.length -1) {
                System.out.print(parameterTypes[i].getName() + " args_" + i);
                break;
            }
            System.out.print(parameterTypes[i].getName() + " args_" + i + ",");
        }
        
    }

    System.out.print(")");

    6. 抛出的异常
    Class[] exceptionTypes = m.getExceptionTypes();
    //if(!(exceptionTypes == null && exceptionTypes.length = 0)) {
    if(exceptionTypes.length > 0 ) {
        System.out.print(" throws");
        for (int i = 0; i < exceptionTypes.length; i++) {
            if(i == exceptionTypes.length - 1){
                System.out.print(exceptionTypes[i].getName());
                break;
            } 
            System.out.print(exceptionTypes[i].getName() + ",");
        }
    }


    System.out.println();
}

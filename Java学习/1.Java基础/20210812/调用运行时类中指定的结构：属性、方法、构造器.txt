调用运行时类中指定的结构：属性、方法、构造器

// 不需要中我的方法
//调用属性
Class clazz = Person.class;

// 创建运行时类的对象
Person p = (Person) clazz.newInstance();

// 获取指定的属性: 要求运行时类中属性声明为public
// 通常不采用此方法
Field id = clazz.getField("id");
 
// 设置当前属性的值
// set(): 参数1 指明设置哪个对象的属性，
          参数2 将此属性设置为多少
id.set(p, 1001);

// 获取当前属性的值
// get(): 参数1 获取哪个对象的当前属性值
int pId = (int) id.get(p);



// 开发中会用的


// 如何操作运行时类中的指定的属性 -- 需要掌握
//调用属性
Class clazz = Person.class;

// 创建运行时类的对象
Person p = (Person) clazz.newInstance();

// 获取指定的属性
// getDeclaredField(String fieldName): 获取运行时类中指定变量名的属性
Field name = clazz.getDeclaredField("name");
 
// 保证当前属性时可访问的
name.setAccessible(true);

// 设置当前属性的值
// set(): 参数1 指明设置哪个对象的属性，
          参数2 将此属性设置为多少
name.set(p, "Tom");

// 获取当前属性的值
// get(): 参数1 获取哪个对象的当前属性值
String pId = (String) name.get(p);



如何操作运行时类中的指定的方法-- 需要掌握

Class clazz = Person.class;

// 创建运行时类的对象
Person p = (Person) clazz.newInstance();

// 获取指定的某个方法
// getDeclaredMethod(): 参数1 指明获取的方法的名称
                        参数2 指明获取的方法的形参列表
Method show = clazz.getDeclaredMethod("show", String.class);

// 保证当前方法可访问的
show.setAccessible(true);

// 调用方法
// invoke(): 参数1 方法的调用者
             参数2 给方法形参赋值的实参
// invoke()的返回值即为对应类中调用的方法的返回值
Object returnValue = show.invoke(p, "CHN"); // String nation = p.show("CHN");

System.out.println(returnValue);

Method showDesc = clazz.getDeclaredMethod("showDesc");

// 保证当前方法可访问的
showDesc.setAccessible(true);
// 如果调用的运行时类中的方法没有返回值，则此invoke()返回null
Object returnVal = showDesc.invoke(Person.class);
System.out.println(returnVal); // null


如何调用运行时类中的指定的构造器
Class clazz = Person.class;

// private Person(String name)
// 获取指定的构造器
// getDeclaredConstructor(): 参数 指明构造器的参数列表
Constructor constructor = clazz.getDeclaredConstructor(String.class);

// 保证此构造器是可访问的
Constructor.setAccessible(true);

// 调用此构造器创建运行时类的对象
Person per = (Person) Constructor.newInstance();
System.out.println(per);
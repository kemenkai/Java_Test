Lambda表达式的使用
1. 举例： (o1, o2) -> Integer.compare(o1, o2)
2. 格式：
    ->: lambda操作符 或 箭头操作符
    ->左边: lambda形参列表 (其实就是接口中的抽象方法的形参列表)
    ->右边: lambda体(其实就是重写的抽象方法的方法体)

3. Lambda表达式的使用：(分为6种情况介绍)
    
    总结:
        ->左边: lambda形参列表的参数类型可以省略（类型推断）; 
            如果lambda形参列表只有一个参数，其一对()也可以省略
        ->右边: lambda体应该使用一对{}包裹; 
            如果lambda体只有一条执行语句(可能时return语句)，可以省略这一对{}和return关键字


4. Lambda表达式的本质: 作为函数式接口的实例


5.如果一个接口种，只声明了一个抽象方法，则此接口就称为函数式接口
我们可以再一个接口上使用@FunctionalInterface注解，这样做可以检查它是否是一个函数式接口。

6. 所以以前用匿名实现类表示的现在都可以用Lambda表达式来写。


// 语法格式一：无参，无返回值
        Runnable r1 = new Runnable() {
            public void run() {
                System.out.println("a");
            }
        };

        r1.run();

        System.out.println("************************")

        Runnable r2 = () -> {System.out.println("b");};

        r2.run();



// 语法格式二: Lambda 需要一个参数，但是没有返回值
Consumer<String> con1 = new Consumer() {
    public void accept(String s) {
        System.out.println(s);
    }
};

con1.accept("a");

System.out.println("************************")

Consumer<String> con2 = (String s) -> {System.out.println(s);};
cons2.accept("b");



// 语法格式三: 数据类型可以省略，因为可有编译器推断得出，称为"类型推断"
Consumer<String> con2 = (String s) -> {System.out.println(s);};
cons2.accept("b");

System.out.println("************************")

Consumer<String> con3 = (s) -> {System.out.println(s);};
cons3.accept("b");




// 语法格式四: Lambda 表达式若只需要一个参数时, 参数的小括号可以省略
Consumer<String> con3 = (s) -> {System.out.println(s);};
cons3.accept("b");

System.out.println("************************")

Consumer<String> con4 = s -> {System.out.println(s);};
cons4.accept("b");




// 语法格式五: Lambda 需要两个或以上的参数，多条执行语句，并且可以有返回值
Comparator<Integer> com1 = new Comparator<Integer>() {
    public int compare(Integer o1, Integer o2) {
        System.out.println(o1);
        System.out.println(o2);
        return o1.compareTo(o2);
    }
};
System.out.println(com1.compare(12, 21));

System.out.println("************************")

Comparator<Integer> com2 = (o1, o2) -> {
    System.out.println(o1);
    System.out.println(o2);
    return o1.compareTo(o2);
};
System.out.println(com2.compare(12, 6));



// 语法格式六： 当Lambda体只有一条语句时, return 与大括号若有，都可以省略
Comparator<Integer> com2 = (o1, o2) -> {
    return o1.compareTo(o2);
};
System.out.println(com2.compare(12, 6));

System.out.println("************************")

Comparator<Integer> com3 = (o1, o2) -> o1.compareTo(o2);
System.out.println(com3.compare(12, 21));
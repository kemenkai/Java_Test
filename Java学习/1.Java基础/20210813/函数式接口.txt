函数式接口

// 自定义函数式接口
// 只包含一个抽象方法的接口，称为函数式接口
@FunctionalInterface
public interface MyInterface {
    void method1();
}

Java 内置四大核心函数式接口
函数式接口                   参数类型        返回类型                用途
Consumer<T> 消费型接口:         T             void               对类型为T的对象应用操作，包含方法: void accept(T t)
Supplier<T> 供给型接口          无            T                  返回类型为T的对象，包含方法: T get()
Function<T, R> 函数型接口       T             R                  对类型为T的对象应用操作，并返回结果。结果是R类型的对象。包含方法: R apply(T t)
Predicate<T> 断定型接口         T             boolean            确定类型为T的对象是否满足某约束，并返回boolean值。包含方法: boolean test(T t)




例子1:
public void test1() {
    happyTime(500, new Consumer<Double>() {
        public void accept(Double aDouble) {
            System.out.println("价格为: " + aDouble);
        }
    });

    System.out.print("***************************************");

    happyTime(400,money -> System.out.println("价格为: " + money));
}

public void happyTime(double money, Consumer<Double> con) {
    con.accept(money);
}


例子2:
public void test1() {
    List<String> list = Arrays.asList("北京", "南京", "天津", "东京", "西京", "普京");

    List<String> filterStrs = filterString(list, new Predicate<String>() {
        public boolean test(String s) {
            return s.contains("京");
        }
    });

    System.out.println(filterStrs);

    System.out.print("***************************************");

    List<String> filterStrs1 = filterString(list, s -> s.contains("京"));

    System.out.println(filterStrs1);

}

// 根据给定的规则，过滤结合种的字符串。此规则由Predicate的方法决定的
public List<String> filterString(List<String> list, Predicate<String> pre) {
    ArrayList<String> filterList = new ArrayList<>();

    for(String s : list) {
        if(pre.test(s)) {
            filterList.add(s);
        }
    }

    return filterList;
}
方法引用与构造器的引用

方法引用(Method References)

方法引用的使用
1. 使用情景: 当要传递给Lambda体的操作，已经有实现的方法了，可以使用方法引用！ 

2. 方法引用，本质上就是Lambda表达式，而Lambda表达式作为函数式接口的实例。所以方法引用，也是函数式接口的实例

3. 使用格式:  类(或对象) :: 方法名

4. 具体分为如下的三种情况:
    情况1  对象 :: 非静态方法
    情况2  类  :: 静态方法
    情况3  类  :: 非静态方法

5. 方法引用使用的要求: 要求接口中的抽象方法的形参列表和返回值类型与方法引用的方法的
    形参列表和返回值类型相同! （针对与情况1和情况2）

// 情况一： 对象 :: 实例方法
// Consumer 中的void accept(T t)
// PrintStream中的void println(T t)
public void test() {
    Consumer<String> con1 = str -> System.out.println(str);
    con1.accept("北京");

    System.out.println("*******************************");

    PrintStream ps = System.out;
    Consumer<String> con2 = ps :: println;
    con2.accept("beijing");
}

// Supplier中的 T get()
// Employee 中的 String getName()
public void test2() {
    Employee emp = new Employee(1001, "Tom", 23, 5600);
    Supplier<String> sup1 = () -> return emp.getName();
    System.out.println(sup1.get());

    System.out.println("*******************************");
    
    Supplier<String> sup2 = emp :: getName;
    System.out.println(sup2.get());
}


// 情况二: 类 :: 静态方法
// Comparator 中的 int compare(T t1, T t2)
// Integer 中的 int compare(T t1, T t2)
public void test3() {
    Comparator<Integer> com1 = (t1 ,t2) -> Integer.compare(t1, t2);
    System.out.println(com1.compare(12, 21));

    System.out.println("*******************************");

    Comparator<Integer> com2 = Integer :: compare;
    System.out.println(com2.compare(12, 3));
}

// Function 中的 R apply(T t)
// Math 中的 Long round(Double d)
public void test4() {
    Function<Double, Long> func1 = d -> Math.round();
    System.out.println(func1.apply(12.3));


    System.out.println("*******************************");

    Function<Double, Long> func2 = Math :: round;
    System.out.println(func2.apply(12.6));
}


// 情况3： 类 :: 实例方法(有难度)
// Comparator 中的 int compare(T t1, T t2)
// String 中的 int t1.compareTo(t2)
public void test5() {
    Comparator<String> com1 = (s1, s2) -> s1.compareTo(s2);
    System.out.println(com1.compare("abc", "abd"));

    System.out.println("*******************************");

    Comparator<String> com2 = String : compareTo;
    System.out.println(com2.compare("abc", "abm"));
}

// BiPredicate 中的 boolean test(T t1, T t2)
// String 中的 boolean t1.equals(t2)
public void test6() {
    BiPredicate<String, String> pre1 = (s1, s2) -> s1.equals(s2);
    System.out.println(pre1.test("abc", "abc"));

    System.out.println("*******************************");

    BiPredicate<String, String> pre2 = String :: equals;
    System.out.println(pre2.test("abc", "abd"));
}

// Function 中的 R applu(T t)
// Employee 中的 String getName()
public void test7() {
    Employee employee = new Employee(1001, "Jerry", 23, 6000);

    Function<Employee, String> func1 = e -> e.getName();
    System.out.println(func1.apply(employee));

    System.out.println("*******************************");

    Function<Employee, String> func2 = Employee :: getName;
    System.out.println(func2.apply(employee));
}



构造器引用的使用方法

一、构造器引用
    和方法引用类型，函数式接口的抽象方法的形参列表和构造器的形参列表一致
    抽象方法的返回值类型即为构造器所属的类的类型

二、 数组引用
    大家可以把数组看作是一个特殊的类，则写法与构造器引用一致


// 构造器引用
// Supplier 中的 T get()
// Employee的空参构造器: Employee()
public void test1() {
    Supplier<Employee> sup1 = () -> new Employee();
    System.out.println(sup1.get());

    System.out.println("*******************************");

    Supplier<Employee> sup2 = Employee :: new;
    System.out.println(sup2.get());
}

// Function 中的 R apply(T t)
public void test2() {
    Function<Integer, Employee> func1 = id -> new Employee(id);
    System.out.println(func1.apply(1));

    System.out.println("*******************************");

    Function<Integer, Employee> func2 = Employee :: new;
    System.out.println(func2.apply(1));
}

// BiFunction 中的 R apply(T t, U u)
public void test3() {
    BiPredicate<Integer, String, Employee> func1 = (id, name) -> new Employee(id, name);
    System.out.println(func1.apply(1, "Tom"));

    System.out.println("*******************************");

    BiPredicate<Integer, String, Employee> func2 = Employee :: new;
    System.out.println(func2.apply(2, "Tom"));
}


// 数组引用
// Function 中的 R apply(T t)
public void test4() {
    Function<Integer, String[]> func1 = length -> new String[length];
    String[] arr1 = func1.apply(5);
    System.out.println(Arrays.toString(arr1));

    System.out.println("*******************************");

    Function<Integer, String[]> func2 = String[] :: new;
    String[] arr2 = func2.apply(10);
    System.out.println(Arrays.toString(arr2));
}
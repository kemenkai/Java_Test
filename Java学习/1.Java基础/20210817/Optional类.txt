Optional类

1. 为了在程序中避免出现空指针异常而创建的。

2. 常用的方法：
    2.1 ofNullable(T t)
    2.2 orElse(T t)

public class Boy {
    private Girl girl;

    public Boy(Girl girl) {
        this.girl = girl;
    }
}

public class Girl {
    private String name;

    public Girl() {

    }

    public Girl(String name) {
        this.name = name;
    }
}

public class OptionalTest {

    /*
        Optional.of(T t): 创建一个Optional 实例，t 必须非空
        Optional.empty(): 创建一个空的Optional实例
        Optional.ofNullable(T t): t可以为null
    */
    @Test
    public void test1() {
        Girl girl = new Girl();
        Optional<Girl> optionalGirl = Optional.of(girl);
        System.out.println(optionalGirl);

        Girl girl1 = null;
        Optional<Girl> optionalGirl1 = Optional.ofNullable(girl1);
        System.out.println(optionalGirl1);

        // orElse(T t): 如果当前的Optional内部封装的t使非空的，则返回内部的t
        //              如果内部的t是空的，则返回orElse()方法中的参数t
        Girl girl1 = optionalGirl1.orElse(new Girl("a"));
        System.out.println(girl1);
    }

    // 旧方法
    public String getGirlName1(Boy boy) {
        return boy.getGirl().getName();
    }

    @Test
    public void test2() {
        Boy boy = new Boy();
        String girlName = getGirlName1(boy);
        System.out.println(girlName);
    }

    // 优化以后的方法
    public String getGirlName2(Boy boy) {
        if(boy != null) {
            Girl girl = boy.getGirl();
            if (girl != null) {
                return girl.getName();
            }
        }
        return null;
    }

    @Test
    public void test3() {
        Boy boy = new Boy();
        String girlName = getGirlName2(boy);
        System.out.println(girlName);
    }

    // 使用Optional类的getGirlName()
    public String getGirlName3(Boy boy) {
        Optional<Boy> boyOptional = Optional.ofNullable(boy);
        // 此时的boy1 一定非空
        Boy boy1 = boyOption.orElse(new Boy(new Girl("迪丽热巴")));
        Girl girl1 = boy1.getGirl();

        Optional<Girl> girlOptional = Optional.ofNullable(girl1);
        // girl2 一定非空
        Girl girl2 = girlOptional.orElse(new Girl("古力娜扎"));

        return girl2.getName();
    }

    @Test
    public void test4() {
        Boy boy = null;
        Boy boy = new Boy();
        Boy boy = new Boy(new Girl("c"));
        String girlName = getGirlName3(boy);
        System.out.println(girlName);
    }
}



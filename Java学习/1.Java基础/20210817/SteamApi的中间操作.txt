SteamApi的中间操作



1. 筛选与切片
List<Employee> list = EmployeeData.getEmployees();
// filter(Predicate p) ------ 过滤, 接受Lambda, 从流中排除某些元素
Stream<Employee> stream = list.stream();
// 练习：查询员工表中薪资大于7000的员工信息
stream.filter(e -> e.getSalary() > 7000).forEach(System.out :: println);

System.out.println("*******************************");
// limit(n) ----- 截断流, 使其元素不超过给定数量 
list.stream().limit(3).forEach(System.out :: println);

System.out.println("*******************************");
// skip(n) ------ 跳过元素, 返回一个扔掉了前n个元素的流。若流中元素不足n个，则返回一个空流。 与 limit(n)互补
list.stream().skip(3).forEach(System.out :: println);

System.out.println("*******************************");
// distinct() ----- 筛选, 通过流所生成元素的hashCode() 和 equals() 去除重复元素
list.add(new Empoyee(1010, "刘强东", 40, 8000));
list.add(new Empoyee(1010, "刘强东", 40, 8000));
list.add(new Empoyee(1010, "刘强东", 40, 8000));
list.add(new Empoyee(1010, "刘强东", 40, 8000));
list.stream().distinct().forEach(System.out :: println);


--------------------------------------------------------------------------------------------

2. 映射
List<String> list = Arrays.asList("a", "b", "c", "d");
// map(Function f) ---- 接受一个函数作为参数, 将元素转换成其他形式或提取信息,
//  该函数会被应用到每个元素上, 并将其映射成一个新的元素。
list.stream().map(str -> str.toUpperCase()).forEach(Syste.out :: println);


System.out.println("*******************************");
// 练习：获取员工姓名长度大于3的员工的姓名
List<Employee> list = EmployeeData.getEmployees();
Stream<Stream> namesStream = list.stream().map(Employee :: getName);
namesStream.filter(name -> name.length() > 3).forEach(System.out :: println);


System.out.println("*******************************");
// 练习2: 
Stream<Stream<Character>> streamStream = list.stream().map(StreamAPITest1 :: formStringToStream);
streamStream.forEach(s -> {s.forEach(System.out :: println)});


System.out.println("*******************************");
// flatMap(Function f) ----- 接收一个函数作为参数, 将流中的每个值都换成另一个流, 然后把所有流链接成一个流。
Stream<Character> characterStream = list.stream().flatMap(StreamAPITest1 :: formStringToStream);
characterStream.forEach(System.out :: println);



// 将字符串中的多个字符构成的集合转换为对应的Stream的实例
public static Stream<Character> formStringToStream(String str) {
    ArrayList<Character> list = new ArraysList<>();
    for(Character c : str.toCharArray) {
        list.add(c);
    }
    return list.stream();
}


--------------------------------------------------------------------------------------------

3. 排序
// sorted() ---- 自然排序
List<Integer> list = Arrays.asList(12, 43, 65, 34, 87, 0, -98, 7);
list.stream().sorted().forEach(System.out :: println);


// 抛异常, 原因： Employee没有实现Comparable接口
// List<Employee> employees = EmployeeData.getEmployees();
// employees.stream().sorted().forEach(System.out :: println);

System.out.println("*******************************");
// sorted(Comparator com) ---- 定制排序
List<Employee> employees = EmployeeData.getEmployees();
employees.stream().sorted( (e1 ,e2) -> {
    
    int ageValue = Integer.compare(e1.getAge(), e2.getAge());
    if(ageValue != 0) {
        return ageValue;
    } else {
        return -Double.Compare(e1.getSalary(), e2.getSalary());
    }

}).forEach(System.out :: println);



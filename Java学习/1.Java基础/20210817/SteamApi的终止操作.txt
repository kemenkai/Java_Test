SteamApi的终止操作

1. 匹配与查找
List<Employee> employees = EmployeeData.getEmployees();
// allMatch(Predicate p) --- 检查是否匹配所有元素。 
// 练习：是否所有的员工的年龄都大于18
boolean allMatch = employees.stream().allMatch(e -> e.getAge() > 18);
System.out.println(allMatch);


System.out.println("*******************************");
// anyMatch(Predicate p) --- 检查是否至少匹配一个元素。 练习：是否存在员工的工资大于 10000
boolean anyMatch = employees.stream().anyMatch(e -> e.getSalary() > 10000);
System.out.println(anyMatch);


System.out.println("*******************************");
// noneMatch(Predicate p) --- 检查是否没有匹配的元素。 
// 练习：是否存在员工姓“雷”
boolean noneMatch = employees.stream().noneMatch(e -> e.getName().startWith("雷"));
System.out.println(noneMatch);


System.out.println("*******************************");
// findFirst --- 返回第一个元素
Optional<Employee> findFirst = employees.stream().findFirst();
System.out.println(findFirst);


System.out.println("*******************************");
// findAny --- 返回当前流中的任意元素
Optional<Employee> findAny = employees.stream().findAny();
System.out.println(findAny);


System.out.println("*******************************");
// count --- 返回流中元素的总个数
long count = employees.stream().filter(e -> e.getSalary() > 5000).count();
System.out.println(count);


System.out.println("*******************************");
// max(Comparator c) --- 返回流中最大值
// 练习： 返回最高的工资
Stream<Double> salaryStream = employees.stream().map(e -> e.getSalary());
Optional<Double> maxSalary = salaryStream.max(Double :: compare);
System.out.println(maxSalary);


System.out.println("*******************************");
// min(Comparator c) --- 返回流中最小值
// 练习： 返回最低工资的员工
Optional<Employee> employee = employees.stream().min( (e1, e2) -> Double.compare(e1.getSalary(), e2.getSalary()));
System.out.println(employee);


System.out.println("*******************************");
// forEach(Consumer c) --- 内部迭代
employees.stream().forEach(System.out :: println);

// 使用集合的遍历操作
employees.forEach(System.out :: println);


--------------------------------------------------------------------------------------------

2. 规约
List<Employee> employees = EmployeeData.getEmployees();
// reduce(T identity, BinaryOperator b) --- 可以将流中元素反复结合起来, 得到一个值。 返回T
// identity： 初始值
// 练习1： 计算1-10的自然数的和
List<Integer> list = Arrayas.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
Integer sum = list.stream().reduce(0, Integer :: sum);
System.out.println(sum);


System.out.println("*******************************");
// reduce(BinaryOperator b) --- 可以将流中元素反复结合起来, 得到一个值。返回Optional<T>
// 练习2：计算公司所有员工工资的总和
Stream<Double> salaryStream = employees.stream().map(Employee :: getSalary);
// Optional<Double> sumMoney = salaryStream.reduce(Double :: sum);
Optional<Double> sumMoney = salaryStream.reduce( (d1, d2) -> d1 + d2);
System.out.println(sumMoney);


--------------------------------------------------------------------------------------------

3. 收集
List<Employee> employees = EmployeeData.getEmployees();
// collect(Collector c) --- 将流转换为其他形式。接收一个Collector接口的实现，用于给Stream中元素做汇总的方法
// 练习1：查找工资大于6000的员工，结果返回一个list或Set
List<Employee> employeeList = employees.stream().filter(e -> e.getSalary() > 6000).collect(Collectors.toList());

employeeList.forEach(System.out :: println);

System.out.println("*******************************");

 Set<Employee> employeeList1 = employees.stream().filter(e -> e.getSalary() > 6000).collect(Collectors.toSet());
 employeeList1.forEach(System.out :: println);
/*
  计算机中不同进制的使用说明
  对于整数，有四种表示方式
  1、二进制(binary): 0，1，满2进1。 以0b或0B开头。
  2、十进制(decimal): 0-9, 满10进1。
  3、八进制(octal): 0-7， 满8进1，以数字0开头表示
  4、十六进制(hex)：0-9及A-F，满16进1，以0x或0X开头表示。此处的A-F不区分大小写。
    如：0x21af + 1 = 0X21B0
  
  所有的数值，不管正负，底层都以补码的方式存储
  正数：三码合一
  负数：
      原码：直接将一个数值换成二进制数。最高位是符号位
      负数的反码：是对原码按位取反，只是最高位（符号位）确定位1
      负数的补码：其反码加1

二进制到十进制转换
    正数：00000000
    负数：10000000
    第一个为符号位

    每一位都为2^x, 得出位数的结果，相加就为十进制
    2^6, 2^5, 2^4, 2^3, 2^2, 2^1, 2^0
    例如: 00000001
    最后一位 1 * 2^0 = 1, 结果为1
    例如: 00000101
    1 * 2^2 + 1 * 2^0 = 5, 结果为5

    正数转为负数的过程
    01111111 -> 127 原码

    11111111 -> -127 原码
        除符号位外，各个为取反
    10000000 -> -127 反码
        +1
    10000001 -> -127 补码

    -127-1 = -128
    10000000 -> -128
  十进制到二进制转换: 除2取余的逆
      13/2--> 6/2 --> 3/2 --> 1/2 --> 0/2 -->  0/2......
           1       0       1       1       0000
      逆向看余数
      00001101

  进制间转换
    进制的基本转换
      十进制 二进制互转
        二进制转成十进制  乘以2的幂数
        十进制转成二进制  除以2取余数
      二进制 八进制互转
      二进制 十六进制互转
      十进制 八进制互转
      十进制 十六进制互转

      找一个中间的的进制绕一下，都先转到二进制，从二进制转到八或十六进制
      八是二的3次幂，十六是二的4次幂

  二进制转八进制
      每三个一位
      例如00000111
      三个一位，111为一位 = 7

  二进制转十六进制
      每四个一位
      例如00001111
      四个一位，1111为一位 = 15 = F
*/

class BinaryTest {
  public static void main(String[] args) {
    int num1 = 0b110;
    int num2 = 110;
    int num3 = 0127;
    int num4 = 0x110A;

    System.out.println("num1 = " + num1);
    System.out.println("num2 = " + num2);
    System.out.println("num3 = " + num3);
    System.out.println("num4 = " + num4);
  }
}
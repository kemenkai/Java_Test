面试题：
    == 和 equals()区别
一、回顾 == 的使用：
    ==：运算符
        1.可以使用在基本数据类型变量和引用数据类型变量中
        2.如果比较的是基本数据类型变量：比较两个变量保存的数据是否相等。（不一定类型要相同）
          如果比较的是引用数据类型变量：比较两个对象的地址值是否相同。即两个引用是否指向同一个对象实体
        补充：==符号使用时，必须保证符号左右两边的变量类型一致

二、equals()方法的使用：
    1.是一个方法，而非运算符
    2.只能适用于引用数据类型
    3.Object类类中equals()的定义：
        public boolean equals(Object obj) {
            return (this == obj);
        }
        说明：Object类中定义的equals()和==的作用是相同的：比较两个对象的地址值是否相同。即两个引用是否指向同一个对象实体
    4.像String、Date、File、包装类等都重写了Object类中的equals()方法。
        重写以后，比较的不是两个引用的地址是否相同，而是比较两个对象的“实体内容”是否相同。
    5.通常情况下，我们自定义的类如果使用equals()的话，也通常是比较两个对象的“实体内容”是否相同。
        那么，我们就需要对Object类中的equals()方法进行重写。
        重写的原则：比较两个对象的实体内容是否相同。

    对称性: x.equals(y) 是true，y.equals(x) 也是true
    自反性：x.equals(x) 必须是true
    传递性：x.equals(y) 是true，y.equals(z) 也是true，那么z.equals(x) 也应该返回true
    一致性：x.equals(y) 是true，只要x和y内容一直不变，equals比较时肯定为true
    任何情况下，x.equals(null), 永远返回的是false

        
            基本数据类型示例：
                int i = 10;
                int j = 10;
                double d = 10.0;
                i == j; true
                i == d; true
                boolean b = true;
                i == b; Error
                char c = 10;
                i == c; true
                char c1 = 'A';
                char c2 = 65;
                c1 == c2; true
            引用数据类型示例：
                Customer cust1 = new Customer("Tom", 21);
                Customer cust2 = new Customer("Tom", 21);
                cust1 == cust2; false

                String str1 = new String("kmk");
                String str2 = new String("kmk");
                str1 == str2; false

                // 默认的equals()
                cust1.equals(cust2); false
                str1.equals(str2); true
                // 重写equals()
                // 重写的原则：比较两个对象的实体内容是否相同
                // String的重写
                public boolean equals(Object anObject) {
                    // 地址相同时肯定相同
                    if (this == obj) {
                        return true;
                    }
                    // 比较是否是相同的类
                    if (anObject instanceof String) {
                        // 相同类时强转为String类
                        String anotherString = (String) anObject;
                        // 下方为比较逻辑
                        int n = value.length;
                        if(n = anotherString.value.length) {
                            char v1[] = value;
                            char v2[] = anotherString.value;
                            int i = 0;
                            while (n-- != 0) {
                                if (v1[i] != v2[i])
                                    return false;
                                i++;
                            }
                            return true;
                        }
                    }
                    return false;
                }